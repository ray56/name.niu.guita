 #配置根Logger
# log4j.rootLogger = [ level ] , appenderName1 , appenderName2 , …
#  [level]: FATAL 0, ERROR 3, WARN 4, INFO 6, DEBUG 7 
 
log4j.rootLogger = TRACE, stdout, GuitarLog1



#配置日志信息输出目的地Appender
#log4j.appender.appenderName = fully.qualified.name.of.appender.class 
#　　log4j.appender.appenderName.option1 = value1 
#　　… 
#　　log4j.appender.appenderName.optionN = valueN 
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方） 

log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%-5p] %c %d{yyyy-MM-dd HH:mm:ss}: %l - %m %n

# log4j.appender.mail=org.apache.log4j.net.SMTPAppender
# log4j.appender.mail.Threshold=FATAL
# log4j.appender.mail.To=manager@example.com,hogehoge@example.com,foo@example.com
# log4j.appender.mail.From=hogehoge@example.com
# log4j.appender.mail.Subject=BODY
# log4j.appender.mail.SMTPHost=192.168.100.100
# log4j.appender.mail.layout=org.apache.log4j.PatternLayout

log4j.logger.GuitarLog=TRACE, stdout, GuitarLog1
log4j.appender.GuitarLog1=org.apache.log4j.DailyRollingFileAppender
log4j.appender.GuitarLog1.DatePattern='.'yyyy-MM
log4j.appender.GuitarLog1.File=logs/GuitarLog.log
log4j.appender.GuitarLog1.Append=true
log4j.appender.GuitarLog1.Threshold = TRACE  
log4j.appender.GuitarLog1.layout=org.apache.log4j.PatternLayout
log4j.appender.GuitarLog1.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %l - %m %n

### カテゴリーの定義
### log4j.logger.カテゴリー=ログレベル, 適用するAppenderの名前[, Appender名]
log4j.logger.MailLogger=INFO, MailBlogLogger
log4j.additivity.MailLogger=false
log4j.appender.MailBlogLogger=org.apache.log4j.DailyRollingFileAppender
log4j.appender.MailBlogLogger.DatePattern='.'yyyy-MM-dd
log4j.appender.MailBlogLogger.File=/usr/local/tomcat/logs/mailblog/mailblog.log
log4j.appender.MailBlogLogger.Append=true
log4j.appender.MailBlogLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.MailBlogLogger.layout.ConversionPattern=%d{yyyy/MM/dd HH:mm:ss} %m %n

log4j.category.org.apache.commons.digester=INFO

#输出异常到单独文件
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.D.File = logs/error.log ## 异常日志文件名  
log4j.appender.D.Append = true  
log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!  
log4j.appender.D.layout = org.apache.log4j.PatternLayout  
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n 


#配置日志信息的格式（布局）
#log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class 
#　　log4j.appender.appenderName.layout.option1 = value1 
#　　… 
#　　log4j.appender.appenderName.layout.optionN = valueN 
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息） 
# %m 输出代码中指定的消息
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
# %r 输出自应用启动到输出该log信息耗费的毫秒数 
# %c 输出所属的类目，通常就是所在类的全名 
# %t 输出产生该日志事件的线程名 
# %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日 22 ： 10 ： 28 ， 921 
# %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )  
